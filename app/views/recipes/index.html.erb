<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Recipe Finder</title>
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        :root {
            --primary-color: #B56CFF;
            --secondary-color: #393349;
            --accent-color: #FFE49D;
            --background-color: #17102A;
            --text-color: #E9E8EB;
        }
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background-color: var(--background-color);
            color: var(--text-color);
        }
        .header {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            flex-direction: column;
        }
        .inputs-row {
            display: flex;
            flex-direction: row;
            gap: 15px;
        }
        .input-wrapper {
            position: relative;
        }
        input { 
            width: 300px; 
            padding: 10px; 
            border-radius: 5px;
            border: none;
            font-size: 18px;
        }
        button { 
            background-color: var(--primary-color);
            color: var(--text-color);
            border: none;
            border-radius: 5px;
        }
        .add-button{
            position: absolute;
            top: 0;
            right: 0;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            aspect-ratio: 1;
            font-size: 200%;
        }
        .find-recipes-button{
            padding: 10px 15px; 
            font-weight: bold;
            font-size: 18px;
        }
        .my-ingredients-row {
            display: flex;
            flex-direction: row;
            padding: 20px;
            gap: 12px;
            max-width: 90%;
            overflow: auto;
        }
        .my-ingredients-row::-webkit-scrollbar {
            width: 8px;
            height: 8px; 
            border-radius: 10px;
        }
        .my-ingredients-row::-webkit-scrollbar-track {
            background: var(--secondary-color);
            border-radius: 10px;
        }
        .my-ingredients-row::-webkit-scrollbar-thumb {
            background-color: var(--primary-color);
            border-radius: 10px;
            border: 2px solid var(--secondary-color); 
        }

        .my-ingredient {
            background-color: var(--primary-color);
            color: var(--text-color);
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            min-width: 80px;
            text-align: center;
            font-size: 16px;
        }
        .highlight { color: green; font-weight: bold; }
        .partial-match { color: orange; font-weight: bold; }
        .spinner {
            display: none;
            border: 10px solid rgba(0, 0, 0, 0.1);
            border-left-color: var(--primary-color);
            border-radius: 50%;
            width: 80px;
            height: 80px;
            animation: spin 1s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            z-index: 2;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .no-results {
            color: red;
            font-weight: bold;
            margin-top: 20px;
        }
        .content {
            width: 100%;
            height: 1000px;
            margin-top: 20px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        .recipes-list-box {
            display: flex;
            flex-direction: column;
            width: 66%;
            position: relative;
            overflow: auto;scrollbar-width: thin;
            scrollbar-color: var(--primary-color) var(--secondary-color);
        }
        .recipes-list-box::-webkit-scrollbar {
            width: 8px;
            border-radius: 10px;
        }
        .recipes-list-box::-webkit-scrollbar-track {
            background: var(--secondary-color);
            border-radius: 10px;
        }
        .recipes-list-box::-webkit-scrollbar-thumb {
            background-color: var(--primary-color); 
            border-radius: 10px; 
            border: 2px solid var(--secondary-color); 
        }

        .recipe-box {
            display: flex;
            flex-direction: column;
            background: var(--secondary-color);
            width: 33%;
            position: relative;
            border-radius: 10px;
        }

        .recipe-wrapper {
            display: flex;
            flex-direction: row;
            align-items: center;
            background: var(--secondary-color);
            border-radius: 10px;
            width: 97%;
            padding: 5px;
            cursor: pointer;
            justify-content: space-between;
        }

        .recipe { margin: 15px 0; }

        .recipe-img-wrapper {
            width: 88px;
            height: 88px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
        }

        .recipe-text-wrapper {
            height:  88px;
            display: flex;
            flex-direction: column;
            justify-content: space-evenly;
            margin-left: 15px;
        }

        .recipe-title{
            font-weight: 800;
            font-size: 24px;
        }

        .recipe-time{
            font-size: 18px;
        }

        .recipe-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .recipe-rating-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 8px;
            margin: 0px 25px 0px 0px;
        }

        .recipe-rating-stars {
            display: flex;
            gap: 5px;
        }

        .recipe-circle {
            width: 20px;
            height: 20px;
            border-radius: 5px;
            background-color: rgba(255, 255, 255, 0);
            display: inline-block;
            position: relative;
            margin-right: 2px;
            border: 3px solid var(--accent-color);
        }

        .recipe-circle-filled {
            background-color: var(--accent-color);
            border-radius: 2px;
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            overflow: hidden;
        }

        .recipe-panel-category{
            position: absolute;
            bottom: 10px;
            right: 10px;
            font-style: italic;
            color: grey;
        }

        .recipe-panel-header{
            display: flex;
            flex-direction: row;
            height: 150px;
            padding: 20px;
        }
        .recipe-panel-img {
            height: 150px;
            width: 150px;
            overflow: hidden;
            border-radius: 10px;
        }
        .recipe-panel-header-info{
            width: calc(100% - 150px);
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            padding: 0px 15px 0px 15px;
        }
        .recipe-panel-title{
            text-align: center;
            font-weight: 900;
            font-size: 24px;
        }
        .recipe-panel-author{
            text-align: center;
            font-size: 20px;
            font-style: italic;
             color: grey;
        }
        .recipe-panel-other-info{
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            font-size: 20px;
        }
        .recipe-panel-prep-time{
            margin-bottom: 5px;
        }
        .recipe-panel-ratings-wrapper{
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 7px;
            font-size: 16px;
            font-style: italic;
        }
        .recipe-rating-text {
            font-weight: 500;
            font-style: italic;
        }
        .recipe-panel-ingredients{
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 8px;
            font-size: 18px;
            list-style-type: none;
        }
        .recipe-box-helper-text {
            position: absolute;
            height: 100%;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            color: grey;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div id="spinner" class="spinner"></div>
    <div id="header" class="header"> 
        <h1>Recipe Finder</h1>
        <div id="inputs-row" class="inputs-row">
            <div id=input-wrapper class="input-wrapper">
                <input id="ingredients" type="text" placeholder="Add ingridient...">
                <button id="add-button" class="add-button" onclick="addIngredient()">+</button>
            </div>
            <button id="find-recipes-button" class="find-recipes-button" onclick="searchRecipes()">Find Recipes</button>
        </div>
        <div id="my-ingredients-row" class="my-ingredients-row"></div>
    </div>
    <div id="content" class="content">
        <div id="recipes-list-box" class="recipes-list-box">
            <div id="recipes"></div>
            <div id="no-results" class="no-results" style="display: none;">No recipes found for the given ingredients.</div>
        </div>
        <div id="recipe-box" class="recipe-box">
            <div id="recipe-box-helper-text" class="recipe-box-helper-text"> Please select a recipe </div>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let loading = false;
        let myIngredients = [];

        document.getElementById('ingredients').addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {                addIngredient();
            }
        });

        const addIngredient = () => {
            const ingredient = document.getElementById('ingredients').value.trim()
            if (ingredient.length < 3) {
                alert('Please enter at least 3 characters.');
                return;
            }
            const ingredientInput = document.getElementById('ingredients');
            myIngredients.push(ingredient);
            ingredientInput.value = '';
            renderIngredients();
        };

        const removeIngredient = (index) => {
            myIngredients.splice(index, 1);
            renderIngredients();
        };

        const renderIngredients = () => {
            const ingredientsRow = document.getElementById('my-ingredients-row');
            ingredientsRow.innerHTML = '';
            myIngredients.forEach((ingredient, index) => {
                const ingredientDiv = document.createElement('div');
                ingredientDiv.className = 'my-ingredient';
                ingredientDiv.textContent = ingredient;
                ingredientDiv.onclick = () => removeIngredient(index);
                ingredientsRow.appendChild(ingredientDiv);
            });
        };

        async function searchRecipes() {
            currentPage = 1;
            const searchTerms = myIngredients.map(term => term.trim().toLowerCase());
            const spinner = document.getElementById('spinner');
            const noResults = document.getElementById('no-results');
            spinner.style.display = 'block';
            noResults.style.display = 'none';

            try {
                const response = await fetch(`/recipes/search?ingredients=${encodeURIComponent(myIngredients.join(","))}&page=${currentPage}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const recipes = await response.json();

                spinner.style.display = 'none';

                const recipesContainer = document.getElementById('recipes');
                recipesContainer.innerHTML = '';

                if (!Array.isArray(recipes) || recipes.length === 0) {
                    noResults.style.display = 'block';
                    return;
                }

                appendRecipes(recipes, searchTerms);
            } catch (error) {
                console.error('Error fetching recipes:', error);
                spinner.style.display = 'none';
                noResults.style.display = 'block';
            }
        }

        async function loadMoreRecipes() {
            if (loading) return;
            loading = true;
            currentPage++;
            const ingredients = myIngredients.map(term => term.trim().toLowerCase());
            const spinner = document.getElementById('spinner');
            spinner.style.display = 'block';

            try {
                const response = await fetch(`/recipes/search?ingredients=${encodeURIComponent(myIngredients.join(","))}&page=${currentPage}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const recipes = await response.json();

                spinner.style.display = 'none';

                if (!Array.isArray(recipes) || recipes.length === 0) {
                    return;
                }

                appendRecipes(recipes, ingredients);
            } catch (error) {
                console.error('Error fetching recipes:', error);
                spinner.style.display = 'none';
            } finally {
                loading = false;
            }
        }

        document.getElementById('recipes-list-box').addEventListener('scroll', () => {
            const recipesListBox = document.getElementById('recipes-list-box');
            if (recipesListBox.scrollTop + recipesListBox.clientHeight >= recipesListBox.scrollHeight) {
                loadMoreRecipes();
            }
        });

        function appendRecipes(recipes, searchTerms) {
            const recipesContainer = document.getElementById('recipes');
            recipes.forEach(recipe => {
                const recipeDiv = document.createElement('div');
                recipeDiv.className = 'recipe';
                const ingredientsList = recipe.recipe_ingredients.map(recipe_ingredient => {
                    const ingredientName = recipe_ingredient.ingredient_name.toLowerCase();
                    let isExactMatch = searchTerms.includes(ingredientName);
                    let isPartialMatch = false;
                    searchTerms.forEach(element => {
                        if (element.includes(ingredientName) || ingredientName.includes(element)) {
                            isPartialMatch = true;
                        }
                    });
                    const className = isExactMatch ? 'highlight' : (isPartialMatch ? 'partial-match' : '');
                    const amount = recipe_ingredient.amount ? recipe_ingredient.amount + ' ' : '';
                    const measurement = recipe_ingredient.measurement ? recipe_ingredient.measurement + ' ' : '';
                    return `<li class="${className}">${amount}${measurement}${ingredientName}</li>`;
                }).join('');
                const imageUrl = recipe.image_url;

                const fullStars = Math.floor(recipe.ratings);
                const partialStar = (recipe.ratings - fullStars) * 100;

                recipeDiv.innerHTML = `
                    <div id="recipe-wrapper" class="recipe-wrapper">
                        <div style="display: flex;">
                            <div id="recipe-img-wrapper" class="recipe-img-wrapper">
                                <img id="recipe-img" class="recipe-img" src="${imageUrl}" alt="${recipe.title}">
                            </div>
                            <div id="recipe-text-wrapper" class="recipe-text-wrapper">
                                <div id="recipe-title" class="recipe-title">${recipe.title}</div>
                                <div id="recipe-time" class="recipe-time"> <strong>
                                    ${parseInt(recipe.prep_time) + parseInt(recipe.cook_time)} mins
                                </div>
                            </div>
                        </div>
                        <div id="recipe-rating-wrapper" class="recipe-rating-wrapper">
                            <div id="recipe-rating-stars" class="recipe-rating-stars">
                                ${[...Array(5)].map((_, i) => {
                                    if (i < fullStars) {
                                        return `
                                            <div class="recipe-circle">
                                                <div class="recipe-circle-filled" style="width: 100%;"></div>
                                            </div>`;
                                    } else if (i === fullStars) {
                                        return `
                                            <div class="recipe-circle">
                                                <div class="recipe-circle-filled" style="width: ${partialStar}%;"></div>
                                            </div>`;
                                    } else {
                                        return `
                                            <div class="recipe-circle">
                                                <div class="recipe-circle-filled" style="width: 0%;"></div>
                                            </div>`;
                                    }
                                }).join('')}
                            </div>
                            <div id="recipe-rating-text" class="recipe-rating-text">
                                ${recipe.ratings} rating
                            </div>
                        </div>
                    </div>
                `;

                recipeDiv.addEventListener('click', () => {
                    const recipeBox = document.getElementById('recipe-box');

                    recipeBox.innerHTML = `
                        <div id="recipe-panel-category" class="recipe-panel-category">Category: ${recipe.category}</div>
                        <div id="recipe-panel-header" class="recipe-panel-header">
                            <div id="recipe-panel-img" class="recipe-panel-img">
                                <img id="recipe-img" class="recipe-img" src="${imageUrl}" alt="${recipe.title}">
                            </div>
                            <div id="recipe-panel-header-info" class="recipe-panel-header-info">
                                <div id="recipe-panel-titles" class="recipe-panel-titles">
                                    <div id="recipe-panel-title" class="recipe-panel-title">
                                        ${recipe.title}
                                    </div>
                                    <div id="recipe-panel-author" class="recipe-panel-author">
                                        By ${recipe.author}
                                    </div>
                                </div>
                                <div id="recipe-panel-other-info" class="recipe-panel-other-info">
                                    <div id="recipe-panel-times" class="recipe-panel-times">
                                        <div id="recipe-panel-times" class="recipe-panel-times">
                                            <div id="recipe-panel-prep-time" class="recipe-panel-prep-time">
                                                <strong>Prep Time:</strong> ${recipe.prep_time} mins
                                            </div>
                                            <div id="recipe-panel-cook-time" class="recipe-panel-cook-time">
                                                <strong>Cook Time:</strong> ${recipe.cook_time} mins
                                            </div>
                                        </div>
                                    </div>
                                    <div id="recipe-panel-ratings-wrapper" class="recipe-panel-ratings-wrapper">
                                        <div id="recipe-panel-stars" class="recipe-panel-stars">
                                            ${[...Array(5)].map((_, i) => {
                                                if (i < fullStars) {
                                                    return `
                                                        <div class="recipe-circle">
                                                            <div class="recipe-circle-filled" style="width: 100%;"></div>
                                                        </div>`;
                                                } else if (i === fullStars) {
                                                    return `
                                                        <div class="recipe-circle">
                                                            <div class="recipe-circle-filled" style="width: ${partialStar}%;"></div>
                                                        </div>`;
                                                } else {
                                                    return `
                                                        <div class="recipe-circle">
                                                            <div class="recipe-circle-filled" style="width: 0%;"></div>
                                                        </div>`;
                                                }
                                            }).join('')}
                                        </div>
                                        <div id="recipe-panel-rating" class="recipe-panel-rating">
                                            ${recipe.ratings} rating
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="recipe-panel-ingredients" class="recipe-panel-ingredients">
                            <div> <strong> INGREDIENTS </strong> </div>
                            ${recipe.recipe_ingredients.map(ingredient => `
                                <li id="ingridient" class="ingridient">${ingredient.amount ? ingredient.amount : ""}${ingredient.measurement ? " " + ingredient.measurement : ""} ${ingredient.ingredient_name}</li>
                             `).join('')}
                        </div>
                    `
                });

                recipesContainer.appendChild(recipeDiv);
            });
        }

        window.addEventListener('scroll', () => {
            if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 100) {
                loadMoreRecipes();
            }
        });
    </script>
</body>
</html>